name: Backend Tests

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint --if-present

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test-database

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test-database
        ASSISTANT_ID: ${{ secrets.ASSISTANT_ID }}

    - name: Run all tests with coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test-database

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: backend
        name: backend-coverage

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit for production dependencies only
      run: |
        echo "üîç Checking production dependencies for high/critical vulnerabilities..."
        
        # Use --omit=dev instead of --production (recommended)
        if npm audit --omit=dev --audit-level=high; then
          echo "‚úÖ No high/critical vulnerabilities in production dependencies"
        else
          echo "‚ö†Ô∏è Found vulnerabilities, checking severity..."
          
          # Get detailed audit info
          AUDIT_RESULT=$(npm audit --omit=dev --audit-level=high --json 2>/dev/null || echo '{"vulnerabilities":{}}')
          
          # Extract vulnerability counts (handle missing jq gracefully)
          if command -v jq >/dev/null 2>&1; then
            HIGH_VULNS=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
            CRITICAL_VULNS=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
          else
            # Fallback without jq
            HIGH_VULNS=$(echo "$AUDIT_RESULT" | grep -o '"high":[0-9]*' | cut -d: -f2 || echo "0")
            CRITICAL_VULNS=$(echo "$AUDIT_RESULT" | grep -o '"critical":[0-9]*' | cut -d: -f2 || echo "0")
          fi
          
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          
          # Only fail on actual high/critical vulnerabilities
          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå Found high/critical vulnerabilities in production dependencies"
            npm audit --omit=dev --audit-level=high
            exit 1
          else
            echo "‚úÖ No high/critical vulnerabilities in production dependencies"
          fi
        fi
